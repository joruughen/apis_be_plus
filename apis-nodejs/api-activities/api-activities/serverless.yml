org: jorgemelgarejo
service: api-activities

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  role: arn:aws:iam::767397712076:role/LabRole
  stage: ${opt:stage, 'dev'}  # Permite establecer el stage desde la línea de comandos
  environment:
    ACTIVITIES_TABLE: ${self:custom.activitiesTable}  # Configura la tabla de actividades
    VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}

package:
  individually: true  # Permite empaquetar las funciones individualmente
  include:
    - node_modules/**  # Asegúrate de incluir node_modules
    - Lambda_CreateActivity.js  # Asegúrate de incluir tu código también
    - Lambda_UpdateItem.js  # Agrega la función de actualización
    - Lambda_DeleteActivity.js  # Agrega la función de eliminación
    - Lambda_GetItem.js  # Agrega la función de obtención

functions:
  Lambda_CreateActivity:
    handler: Lambda_CreateActivity.handler  # Apunta al archivo y función correspondientes
    memorySize: 512  # Memoria asignada para la función
    timeout: 30  # Tiempo máximo de ejecución
    environment:
      ACTIVITIES_TABLE: ${self:custom.activitiesTable}  # Variable de entorno para la tabla
      STAGE: ${self:provider.stage}  # Variable de entorno para el stage
    events:
      - http:
          path: activities
          method: post
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"  # Garantizar que la respuesta sea de tipo JSON

  Lambda_UpdateActivity:
    handler: Lambda_UpdateActivity.handler  # Apunta al archivo de la función de actualización
    memorySize: 512
    timeout: 30
    environment:
      ACTIVITIES_TABLE: ${self:custom.activitiesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: activities/  # Define el parámetro en la URL
          method: put
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"

  Lambda_DeleteActivity:
    handler: Lambda_DeleteActivity.handler  # Apunta al archivo de la función de eliminación
    memorySize: 512
    timeout: 30
    environment:
      ACTIVITIES_TABLE: ${self:custom.activitiesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: activities/  # Define el parámetro en la URL
          method: delete
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"

  Lambda_GetActivity:
    handler: Lambda_GetActivity.handler  # Asegúrate de que apunte a tu handler
    memorySize: 512
    timeout: 30
    environment:
      ACTIVITIES_TABLE: ${self:custom.activitiesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: activities
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                method: true  # Espera un parámetro 'method' en la URL
                limit: true  # Espera un parámetro 'limit' en la URL
                lastEvaluatedKey: false  # Este es opcional, no es obligatorio



custom:
  activitiesTable: ${self:provider.stage}_t_activities  # La tabla de actividades cambia según el stage
  validateTokenFunction: api-security-${self:provider.stage}-ValidateAccessToken
