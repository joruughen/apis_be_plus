org: jorgemelgarejo
service: api-purchasables

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  role: arn:aws:iam::767397712076:role/LabRole
  stage: ${opt:stage, 'dev'}  # Permite establecer el stage desde la línea de comandos
  environment:
    PURCHASABLES_TABLE: ${self:custom.purchasablesTable}  # Configura la tabla de purchasables
    VALIDATE_FUNCTION_NAME: ${self:custom.validateTokenFunction}

package:
  individually: true  # Permite empaquetar las funciones individualmente
  include:
    - node_modules/**  # Asegúrate de incluir node_modules
    - Lambda_CreatePurchasable.js  # Asegúrate de incluir tu código también
    - Lambda_UpdatePurchasable.js  # Agrega la función de actualización
    - Lambda_DeletePurchasable.js  # Agrega la función de eliminación
    - Lambda_GetPurchasable.js  # Agrega la función de obtención

functions:
  Lambda_CreatePurchasable:
    handler: Lambda_CreatePurchasable.handler  # Apunta al archivo y función correspondientes
    memorySize: 512  # Memoria asignada para la función
    timeout: 30  # Tiempo máximo de ejecución
    environment:
      PURCHASABLES_TABLE: ${self:custom.purchasablesTable}  # Variable de entorno para la tabla
      STAGE: ${self:provider.stage}  # Variable de entorno para el stage
    events:
      - http:
          path: purchasables
          method: post
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"  # Garantizar que la respuesta sea de tipo JSON

  Lambda_UpdatePurchasable:
    handler: Lambda_UpdatePurchasable.handler  # Apunta al archivo de la función de actualización
    memorySize: 512
    timeout: 30
    environment:
      PURCHASABLES_TABLE: ${self:custom.purchasablesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: purchasables/  # Define el parámetro en la URL
          method: put
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"

  Lambda_DeletePurchasable:
    handler: Lambda_DeletePurchasable.handler  # Apunta al archivo de la función de eliminación
    memorySize: 512
    timeout: 30
    environment:
      PURCHASABLES_TABLE: ${self:custom.purchasablesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: purchasables/  # Define el parámetro en la URL
          method: delete
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }
          response:
            headers:
              Content-Type: "'application/json'"

  Lambda_GetPurchasable:
    handler: Lambda_GetPurchasable.handler  # Asegúrate de que apunte a tu handler
    memorySize: 512
    timeout: 30
    environment:
      PURCHASABLES_TABLE: ${self:custom.purchasablesTable}
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: purchasables
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                method: true  # Espera un parámetro 'method' en la URL
                limit: true  # Espera un parámetro 'limit' en la URL
                lastEvaluatedKey: false  # Este es opcional, no es obligatorio

custom:
  purchasablesTable: ${self:provider.stage}_t_purchasable  # La tabla de purchasables cambia según el stage
  validateTokenFunction: api-security-${self:provider.stage}-ValidateAccessToken